<?xml version="1.0" encoding="utf-8"?>
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="600" height="400" minWidth="300" minHeight="200"
		 skinClass="components.skins.ResizableTitleWindowSkin" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*" xmlns:marker="actionScripts.ui.marker.*" xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import actionScripts.valueObjects.GenericSelectableObject;
			
			public static const TYPE_COMMIT:String = "typeCommit";
			public static const TYPE_REVERT:String = "typeRevert";
			
			[Bindable] public var filesCount:int;
			[Bindable] public var isGitAvailable:Boolean;
			[Bindable] public var commitDiffCollection:ArrayCollection;
			
			public var type:String = TYPE_COMMIT;
			public var isSubmit:Boolean;
			public var commitMessage:String;
			
			private function onCreationCompletes(event:FlexEvent):void
			{
				btnCommit.label = (type == TYPE_COMMIT) ? "Commit Selected" : "Revert Selected";
				if (type == TYPE_REVERT)
				{
					lstFiles.percentHeight = 100;
					txtMessage.includeInLayout = txtMessage.visible = false;
				}
			}
			
			private function onSubmit():void
			{
				if (type == TYPE_COMMIT)
				{
					var tmpArr : Array = new Array(sValidator);
					if (Validator.validateAll(tmpArr).length != 0)
					{
						return;
					}
				}
				
				isSubmit = true;
				commitMessage = txtMessage.text;
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function getResourceName(item:Object):String
			{
				return ((item as GenericSelectableObject).data.path as String);
			}
			
			protected function onSelectAllChange(event:Event):void
			{
				var isSelected:Boolean = event.target.selected;
				for each (var i:GenericSelectableObject in commitDiffCollection)
				{
					i.isSelected = isSelected;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" source="{txtMessage}" property="text" trigger="{btnCommit}" triggerEvent="click"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  paddingLeft="12" paddingBottom="9" paddingTop="9" paddingRight="13">
		<s:Label text="Select file(s) to continue:"
				 paddingBottom="4"/>
		<s:List id="lstFiles"
				width="100%" height="70%" styleName="multiLineList"
				dataProvider="{commitDiffCollection}"
				requireSelection="true">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="22">
						<fx:Script>
							<![CDATA[
								import actionScripts.plugins.git.GitProcessManager;
								override public function set data(value:Object):void
								{
									if (value) 
									{
										super.data = value;
										labelDisplay.text = data.data.path;
										switch(data.data.status)
										{
											case GitProcessManager.GIT_STATUS_FILE_DELETED:
											{
												lblStatus.text = "D";
												labelDisplay.setStyle("color", 0xff6666);
												lblStatus.setStyle("color", 0xff6666);
												break;
											}
												
											case GitProcessManager.GIT_STATUS_FILE_NEW:
											{
												lblStatus.text = "N";
												labelDisplay.setStyle("color", 0x33cc33);
												lblStatus.setStyle("color", 0x33cc33);
												break;
											}
												
											default:
											{
												lblStatus.text = "M";
												labelDisplay.setStyle("color", 0xffffff);
												lblStatus.setStyle("color", 0xffffff);
												break;
											}
										}
									}
								}
								
							]]>
						</fx:Script>
						
						<s:layout>
							<s:HorizontalLayout verticalAlign="middle" paddingLeft="4" paddingRight="6" gap="2"/>
						</s:layout>
						
						<s:Label id="lblStatus"
								 width="20" textAlign="center"/>
						<s:CheckBox id="cbSelect"
									change="data.isSelected = cbSelect.selected" selected="{data.isSelected}"/>
						<s:Label id="labelDisplay"
								 paddingLeft="8"/>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:TextArea id="txtMessage"
					width="100%" height="30%"
					prompt="Commit message.."/>
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<s:CheckBox label="Select/Deselect All"
					color="0xffffff"
					change="onSelectAllChange(event)"/>
		<s:Spacer width="100%"/>
		<s:Button id="btnCommit" label="Commit Selected"
				  styleName="darkButton" click="onSubmit()"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>