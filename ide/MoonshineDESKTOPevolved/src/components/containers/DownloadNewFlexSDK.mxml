<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
//
// Author: Prominic.NET, Inc. 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 implements="actionScripts.ui.IContentWindow"
		 label="Download a New SDK"
		 width="100%" backgroundColor="0xdbdbdb"
		 height="100%" creationComplete="initThis()">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.tabview.CloseTabEvent;
			import actionScripts.utils.NoSDKNotifier;
			import actionScripts.utils.SDKUtils;
			import actionScripts.valueObjects.SDKReferenceVO;

		public var selectedSDKDir:File;
		public var requestedSDKDownloadVersion:String;

		private var installerView:InstallApacheFlex;

		public function get longLabel():String
		{
			return label;
		}

		public function isChanged():Boolean
		{
			return false;
		}

		public function isEmpty():Boolean
		{
			return false;
		}

		public function save():void
		{
		}

		/**
		 * On creation completes
		 */
		private function initThis():void
		{
			var sdksFolder:File;

			installerView = new InstallApacheFlex();
			installerView.width = 800;
			installerView.height = 700;
			installerView.horizontalCenter = installerView.verticalCenter = 0;
			installerView.addEventListener("INSTALL_FINISH", onSDKSelected, false, 0, true);
			installerView.addEventListener("INSTALL_CANCEL", onSDKInstallCancelled, false, 0, true);
			addElement(installerView);

			addEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing, false, 0, true);
		}

		private function removeListeners():void
		{
			installerView.removeEventListener("INSTALL_FINISH", onSDKSelected);
			installerView.removeEventListener("INSTALL_CANCEL", onSDKInstallCancelled);
		}

		/**
		 * On SDK downloaded and selected by the user
		 */
		private function onSDKSelected(event:Event):void
		{
			selectedSDKDir = InstallApacheFlex(event.target).getFlexPath();
			removeListeners();
			doSave(null);
		}

		/**
		 * On SDK installation cancelled
		 */
		private function onSDKInstallCancelled(event:Event):void
		{
			removeListeners();
			IDEModel.getInstance().noSDKNotifier.dispatchEvent(new Event(NoSDKNotifier.SDK_SAVE_CANCELLED));
			removeElement(installerView);
			installerView = null;
			GlobalEventDispatcher.getInstance().dispatchEvent(
					new CloseTabEvent(CloseTabEvent.EVENT_CLOSE_TAB, this)
			);
		}

		private function doSave(event:Event):void
		{
			// check if valid SDK directory
			var sdkDescription:SDKReferenceVO = SDKUtils.getSDKReference(new FileLocation(selectedSDKDir.nativePath));
			if (!sdkDescription)
			{
				Alert.show("Not a valid SDK directory or not able to read from the source.", "Error!");
				return;
			}

			// check if already added in saved SDKs list
			var projectRefTemp:SDKReferenceVO = SDKUtils.isSDKAlreadySaved(sdkDescription);

			if (!projectRefTemp)
			{
				projectRefTemp = SDKUtils.getSDKFromSavedList(sdkDescription.name);
			} // in case of pre-existing SDK item
			IDEModel.getInstance().userSavedTempSDKPath = projectRefTemp.path;
			//GlobalEventDispatcher.getInstance().dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, "actionScripts.plugins.as3project.mxmlc::MXMLCPlugin"));

			// close will close the tab
			GlobalEventDispatcher.getInstance().dispatchEvent(
					new CloseTabEvent(CloseTabEvent.EVENT_CLOSE_TAB, this)
			);
		}

		protected function onThisClosing(event:Event):void
		{
			removeEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing);
			if (installerView) removeListeners();
		}
		]]>
	</fx:Script>
</mx:Canvas>